3) After running the 6 different scenarios many times, the run times were very consistent and close to the numbers below:

		Inserted one by one	Inserted at once	
Ascending	0.0020			0.0009
Descending	0.0100			0.0090
Random		0.0030			0.0025

To start, descending is the easiest to explain. If the numbers are entered one by one in the opposite order they will be in 
the array, it takes the most time; because each number added is the new smallest element, it must be shifted all the way up 
the tree.
Similarly, inserting all elements at once means they all must be moved around to be in correct ascending order in the heap
data structure. So these both take the most time possible for a minimum heap data structure since every element is out of order
and must be shifted up into the correct position. (If it was a maximum heap data structure, these would take the least time
because all elements would already be in order). 

Ascending is the fastest case scenario. This is because the elements are already obeying the rules for a minimum heap data
structure. Every child at 2i and 2i+1 is already bigger because the array is in ascending order. (This would be slowest case
for maximum heap data structure, since no elements would be in the correct order). 
Even though this is the fastest case for insertion, inserting at once and inserting one by one have very different times.
This is because inserting at once just has to check each index once. Since the array is already in order, it just checks each 
index. On the other hand, inserting one by one still has to actually insert the element into the heap array and then check the index.
So it takes much more time due to inserting and checking instead of just checking, even though the elements are already in order.

Random is just in the middle. The run time is much closer to asceding, however, so it seems pretty quick. This is probably because
not only would about half of the values already be in order, but the ones out of order don't need to be shifted all the way up like
in each descending order insertion. So the run time is a lot faster than descending.



4) For any d-heap, d is the number of children that a 'node' can have. So the tree grows at (d^n)-1.
If d is 2 like we learned in class, then each row has 2^h elements (h is height). The secord row has 2^2 = 4 elements.
This holds true for all values of d, so each row has d^h elements. This means that you can get to the next row by 
multiplying the index by d. This is the same as raising the power one higher, which is the next row.
Now considering indexing starting at 0, we can follow the equation below to find the children:
	di + 1, di + 2, di + 3, ..., di + d;
For d=2, you get just 2i+1 and 2i+2.
For d=3, you get 3i+1, 3i+2, 3i+3.
You can easily prove that the base case d=2 is true and that each increment adds 1 more child. This makes
sense because that means for any d value, each node will have d children, which is the requirement. 
And the parent index is just: floor((i-1) / d). 

So if d=3:
Starting at 0, its first child is index (0*3)+1 = 1
that childs first child is (1*3)+1 = 4
one more is (4*3)+1 = 13
and you can add 1-3 to get the number 1-3 child respectively
Starting at 0, its third child is index (0*3)+3 = 3
that childs second child is (3*3)+2 = 11

this is shown in the graph below for reference in the above statements
it holds for all d values. The value at each 'node' is the array index

				0
				|
		 ______________/|\_____________	
		/		|	       \
		1		2		3
	   	|		|		| 
	     __/|\_	     __/|\__	     __/|\__
            /	|  \	    /	|   \	    /	|   \
	   4    5   6       7   8    9     10   11   12
	   |
	__/|\__
       /   |   \
      13   14  15

